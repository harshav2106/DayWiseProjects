{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.token = localStorage.getItem('token');\n      this.role = localStorage.getItem('role');\n      this.userId = Number(localStorage.getItem('userId')) || null;\n      this.base = 'http://localhost:8080';\n      // Observable for auth state changes\n      this.isAuthenticatedSubject = new BehaviorSubject(!!this.token);\n      this.isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n    }\n    login(username, password) {\n      return this.http.post(`${this.base}/user/login`, {\n        username,\n        password\n      }).pipe(tap(response => this.setSession(response)));\n    }\n    setSession(data) {\n      this.token = data.token;\n      this.role = data.role;\n      this.userId = data.userId;\n      localStorage.setItem('token', this.token);\n      localStorage.setItem('role', this.role);\n      localStorage.setItem('userId', String(this.userId));\n      this.isAuthenticatedSubject.next(true);\n    }\n    isLoggedIn() {\n      return !!this.token;\n    }\n    getToken() {\n      return this.token;\n    }\n    getRole() {\n      return this.role;\n    }\n    getUserId() {\n      return this.userId;\n    }\n    logout(redirect = true) {\n      this.token = null;\n      this.role = null;\n      this.userId = null;\n      localStorage.clear();\n      this.isAuthenticatedSubject.next(false);\n      if (redirect) {\n        this.router.navigate(['/']);\n      }\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}