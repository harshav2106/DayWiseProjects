{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    // Get current user value\n    get currentUser() {\n      return this.currentUserSubject.value;\n    }\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.apiUrl = `${environment.apiUrl}/api/users`;\n      // Current user observable\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      // Try to load user from localStorage on service init\n      this.loadUserFromStorage();\n    }\n    // Load user data from localStorage\n    loadUserFromStorage() {\n      const userData = localStorage.getItem('currentUser');\n      if (userData) {\n        try {\n          this.currentUserSubject.next(JSON.parse(userData));\n        } catch (e) {\n          console.error('Failed to parse user data from localStorage', e);\n          this.clearUser();\n        }\n      }\n    }\n    // Update current user data\n    updateCurrentUser(user) {\n      this.currentUserSubject.next(user);\n      if (user) {\n        localStorage.setItem('currentUser', JSON.stringify(user));\n      } else {\n        this.clearUser();\n      }\n    }\n    // Clear user data\n    clearUser() {\n      this.currentUserSubject.next(null);\n      localStorage.removeItem('currentUser');\n    }\n    getUserProfile() {\n      console.log('Fetching user profile from:', `${this.apiUrl}/profile`);\n      return this.http.get(`${this.apiUrl}/profile`).pipe(tap({\n        next: user => {\n          console.log('User profile fetched successfully:', user);\n          this.updateCurrentUser(user);\n        },\n        error: error => {\n          console.error('Error fetching user profile:', {\n            url: `${this.apiUrl}/profile`,\n            status: error.status,\n            message: error.message,\n            error: error.error\n          });\n        }\n      }), catchError(error => {\n        console.error('Failed to fetch user profile', error);\n        if (error.status === 404) {\n          console.error('The requested user profile endpoint was not found. Please check if the backend is running and the endpoint is correct.');\n        } else if (error.status === 401) {\n          console.error('Authentication required. Please log in again.');\n          this.router.navigate(['/login']);\n        }\n        return of(null);\n      }));\n    }\n    updateUserProfile(profile) {\n      return this.http.put(`${this.apiUrl}/profile`, profile);\n    }\n    updatePassword(currentPassword, newPassword) {\n      return this.http.put(`${this.apiUrl}/change-password`, {\n        currentPassword,\n        newPassword\n      });\n    }\n    static {\n      this.ɵfac = function UserService_Factory(t) {\n        return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: UserService,\n        factory: UserService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}