{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let UserProfileComponent = class UserProfileComponent {\n  constructor(userService, fb, toastr) {\n    this.userService = userService;\n    this.fb = fb;\n    this.toastr = toastr;\n    this.loading = false;\n    this.isEditing = false;\n    this.user = null;\n    this.profileForm = this.fb.group({\n      username: ['', [Validators.required]],\n      email: ['', [Validators.required, Validators.email]],\n      name: [''],\n      address: ['']\n    });\n    this.passwordForm = this.fb.group({\n      currentPassword: ['', [Validators.required, Validators.minLength(6)]],\n      newPassword: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  ngOnInit() {\n    this.loadUserProfile();\n  }\n  loadUserProfile() {\n    this.loading = true;\n    this.userService.getUserProfile().subscribe({\n      next: user => {\n        this.user = user;\n        this.profileForm.patchValue({\n          username: user.username,\n          email: user.email,\n          name: user.name || '',\n          address: user.address || ''\n        });\n      },\n      error: err => {\n        this.toastr.error('Failed to load user profile');\n        console.error('Error loading profile:', err);\n      },\n      complete: () => this.loading = false\n    });\n  }\n  onProfileSubmit() {\n    if (this.profileForm.valid) {\n      this.loading = true;\n      this.userService.updateUserProfile(this.profileForm.value).subscribe({\n        next: updatedUser => {\n          this.user = updatedUser;\n          this.isEditing = false;\n          this.toastr.success('Profile updated successfully');\n        },\n        error: err => {\n          this.toastr.error('Failed to update profile');\n          console.error('Error updating profile:', err);\n        },\n        complete: () => this.loading = false\n      });\n    }\n  }\n  onChangePassword() {\n    if (this.passwordForm.valid) {\n      this.loading = true;\n      const {\n        currentPassword,\n        newPassword\n      } = this.passwordForm.value;\n      this.userService.updatePassword(currentPassword, newPassword).subscribe({\n        next: () => {\n          this.toastr.success('Password updated successfully');\n          this.passwordForm.reset();\n        },\n        error: err => {\n          this.toastr.error('Failed to update password');\n          console.error('Error updating password:', err);\n        },\n        complete: () => this.loading = false\n      });\n    }\n  }\n  toggleEdit() {\n    this.isEditing = !this.isEditing;\n  }\n};\nUserProfileComponent = __decorate([Component({\n  selector: 'app-user-profile',\n  templateUrl: './user-profile.component.html',\n  styleUrls: ['./user-profile.component.css']\n})], UserProfileComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}