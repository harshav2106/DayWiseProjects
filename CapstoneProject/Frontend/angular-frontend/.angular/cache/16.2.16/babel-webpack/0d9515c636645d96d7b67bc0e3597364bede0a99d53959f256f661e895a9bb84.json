{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user.service\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http, userService) {\n      this.http = http;\n      this.userService = userService;\n      this.base = 'http://localhost:8080';\n    }\n    // Product endpoints\n    getProducts() {\n      return this.http.get(`${this.base}/product`).pipe(catchError(this.handleError));\n    }\n    createProduct(product) {\n      return this.http.post(`${this.base}/product`, product).pipe(catchError(this.handleError));\n    }\n    updateProduct(product) {\n      return this.http.put(`${this.base}/product`, product).pipe(catchError(this.handleError));\n    }\n    deleteProduct(id) {\n      return this.http.delete(`${this.base}/product/${id}`).pipe(catchError(this.handleError));\n    }\n    // Cart endpoints\n    addToCart(productId, quantity = 1) {\n      const userId = this.userService.currentUser?.id;\n      if (!userId) {\n        return throwError(() => new Error('User not authenticated'));\n      }\n      return this.http.post(`${this.base}/cart/addProd?userId=${userId}&productId=${productId}&qty=${quantity}`, {}).pipe(catchError(this.handleError));\n    }\n    getCart() {\n      const userId = this.userService.currentUser?.id;\n      if (!userId) {\n        return throwError(() => new Error('User not authenticated'));\n      }\n      return this.http.get(`${this.base}/cart/${userId}`).pipe(catchError(this.handleError));\n    }\n    updateCartItem(itemId, quantity) {\n      return this.http.put(`${this.base}/cart/update?itemId=${itemId}&qty=${quantity}`, {}).pipe(catchError(this.handleError));\n    }\n    removeFromCart(itemId) {\n      return this.http.delete(`${this.base}/cart/deleteProd/${itemId}`).pipe(catchError(this.handleError));\n    }\n    // Order endpoints\n    createOrder() {\n      const userId = this.userService.currentUser?.id;\n      if (!userId) {\n        return throwError(() => new Error('User not authenticated'));\n      }\n      return this.http.post(`${this.base}/order?userId=${userId}`, {}).pipe(catchError(this.handleError));\n    }\n    getMyOrders() {\n      const userId = this.userService.currentUser?.id;\n      if (!userId) {\n        return throwError(() => new Error('User not authenticated'));\n      }\n      return this.http.get(`${this.base}/order/${userId}`).pipe(catchError(this.handleError));\n    }\n    // Error handling\n    handleError(error) {\n      let errorMessage = 'An error occurred';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Server-side error\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n      console.error(errorMessage);\n      return throwError(() => new Error(errorMessage));\n    }\n    static {\n      this.ɵfac = function ApiService_Factory(t) {\n        return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ApiService,\n        factory: ApiService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}